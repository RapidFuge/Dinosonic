name: Build and Release Dinosonic

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release Type (prerelease/release)"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - release
      version:
        description: "Version for the release (e.g., 1.2.3)"
        default: "1.x.x"
        required: true
      is_latest:
        description: "Set the release as latest"
        required: true
        default: "false"
        type: choice
        options:
          - true
          - false
      is_draft:
        description: "Set the release as a draft"
        required: true
        type: choice
        default: "true"
        options:
          - true
          - false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: latest

      - name: Run Build
        run: |
          deno task build:linux
          deno task build:linuxarm
          deno task build:mac
          deno task build:macarm
          deno task build:windows

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dinosonic-binaries
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout into repo
        uses: actions/checkout@v3

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          name: dinosonic-binaries
          path: dist/

      - name: Upload binaries to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "./dist/dinosonic-linux-x86, ./dist/dinosonic-linux-aarch64, ./dist/dinosonic-mac-x86, ./dist/dinosonic-mac-aarch64, ./dist/dinosonic-win-x86.exe"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ format('v{0}',inputs.version) }}
          commit: ${{ github.sha }}
          draft: ${{ inputs.is_draft }}
          artifactErrorsFailBuild: true
          name: ${{ format('v{0}',inputs.tag) }}
          bodyFile: .github/changelog.md
          makeLatest: ${{ inputs.is_latest }}
